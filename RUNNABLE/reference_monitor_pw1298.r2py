"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    if create:
      if self.Afn in listfiles():
        self.Afile = openfile(self.Afn,create)
        self.Bfile = openfile(self.Bfn,create)
        self.Bfile.writeat(self.Afile.readat(None,0),0)
      else:
        self.Afile = openfile(self.Afn,create)
        self.Bfile = openfile(self.Bfn,create)
        self.Afile.writeat('SE', 0)
    else:
      if self.Afn in listfiles():
        self.Afile = openfile(self.Afn,True)
        self.Bfile = openfile(self.Bfn,True)
        self.Bfile.writeat(self.Afile.readat(None,0),0)
      else:
        raise FileNotFoundError


  def writeat(self,data,offset):
    
    # Write the requested data to the B file using the sandbox's writeat call
    
    if offset < 0:
      raise RepyArgumentError

    elif offset > len(self.Bfile.readat(None,0)):
      raise SeekPastEndOfFileError

    else:
      self.Bfile.writeat(data,offset)
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...

    length = len(self.Afile.readat(None,0))

    if offset < 0 or length < 0:

      raise RepyArgumentError
    elif offset >= len(self.Afile.readat(None,0)):

      raise SeekPastEndOfFileError
    elif bytes > length and bytes != None:

      raise SeekPastEndOfFileError
    elif (len(self.Afile.readat(None,0)) < offset+length) and bytes != None:

      raise RepyArgumentError

    else:
      try:
        read_data = self.Afile.readat(bytes,offset)

        return read_data
      except:
        raise RepyArgumentError

  def close(self):
    
    # backup_data = self.Afile.readat(None,0)
    # data = self.Bfile.readat(None,0)
    # backup_file = self.Afn
    # if self.Bfile.readat(None,0).startswith("S") and self.Bfile.readat(None,0).endswith("E"):
    #   self.Afile.close()
    #   self.Bfile.close()
    #   removefile(self.Afn)
    #   openfile(backup_file,True).writeat(data,0)
    #   removefile(self.Bfn)
    # else:
    #   self.Afile.close()
    #   self.Bfile.close()
    #   removefile(self.Afn)
    #   openfile(backup_file,True).writeat(backup_data,0)
    #   removefile(self.Bfn)
    try:
      backup_data = self.Afile.readat(None, 0)  
      data = self.Bfile.readat(None, 0)
      valid = data.startswith("S") and data.endswith("E")

      self.Afile.close()
      self.Bfile.close()

      if valid:
        # If data is valid, update the .a file with new data from .b
        removefile(self.Afn)
        with openfile(self.Afn, True) as f:
          f.writeat(data, 0)
        removefile(self.Bfn)  # Remove the .b file after updating .a
      else:
        # If data is not valid, restore the original data to .a
        removefile(self.Afn)
        with openfile(self.Afn, True) as f:
          f.writeat(backup_data, 0)
        removefile(self.Bfn)  # Remove the .b file as its data was invalid

    except Exception as e:
      print("Failed to close files properly:", str(e))
    finally:
      # Ensure all files are closed even if exceptions occur
      if not self.Afile.is_closed():
        self.Afile.close()
      if not self.Bfile.is_closed():
        self.Bfile.close()
      # Cleanup: Ensure no residual files remain
      if exists(self.Afn):
        removefile(self.Afn)
      if exists(self.Bfn):
        removefile(self.Bfn)

def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()