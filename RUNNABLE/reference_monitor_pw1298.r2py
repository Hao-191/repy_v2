"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self, filename, create):
    self.Afn = filename + '.a'
    self.Bfn = filename + '.b'
    self.lock = create_lock()

    if create:
      self.Afile = openfile(self.Afn, create)
      self.Bfile = openfile(self.Bfn, create)
      # Initialize A file with 'SE' to ensure it always has a valid state
      self.Afile.writeat('SE', 0)
    else:
      self.Afile = openfile(self.Afn, False)
      self.Bfile = openfile(self.Bfn, False)

  def writeat(self, data, offset):
    self.lock.acquire(True)
    try:
      # Directly write to the B file which is the working copy
      self.Bfile.writeat(data, offset)
    finally:
      self.lock.release()

  def readat(self, bytes, offset):
    self.lock.acquire(True)
    try:
      # Read from A file to ensure returning the last valid state
      return self.Afile.readat(bytes, offset)
    finally:
      self.lock.release()

  def close(self):
    # Validate B file before deciding to copy its content to A file
    self.lock.acquire(True)
    try:
      data = self.Bfile.readat(None, 0)
      if data.startswith('S') and data.endswith('E'):
        # If valid, write it to A file, making it the new 'valid' state
        self.Afile.writeat(data, 0)
      # Always close both files
      self.Afile.close()
      self.Bfile.close()
    finally:
      self.lock.release()
      # Clean up: remove B file since it's the temporary working copy
      removefile(self.Bfn)
      if not data.startswith('S') or not data.endswith('E'):
        # Restore A to its initial valid state if B was not valid
        removefile(self.Afn)
        with openfile(self.Afn, True) as f:
          f.writeat('SE', 0)

def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()